#%RAML 0.8
title: org.opent2t.sample.thermostat.superpopular
version: v1.0

schemas:
  - Mode: !include oic.r.mode.json
  - ModeUpdate: !include oic.r.mode-Update.json
  - Temperature: !include oic.r.temperature.json
  - Sensor: !include oic.r.sensor.json
  - Clock: !include oic.r.clock.json
  - ThermostatPlatform: !include org.opent2t.sample.thermostat.superpopular.json
  - Subscription: |
      {
        "type": "object",
        "properties": {
          "callbackUrl": { "type": "string" },
          "expiration": { "type": "number" },
          "response": { "type": "string"}
        }
      }

traits:
  - interface-actuator:
      queryParameters:
        if:
          enum: ["oic.if.a", "oic.if.baseline"]

  - interface-sensor:
      queryParameters:
        if:
          enum: ["oic.if.s", "oic.if.baseline"]

resourceTypes:
  - !include org.opent2t.availability.yaml
  - temperatureType:
      get:
        queryParameters:
          units:
            displayName: Units
            enum: ["C","F","K"]
        responses:
          200:
            body:
              application/json:
                schema: Temperature
                example: |
                  {
                    "rt": ["oic.r.temperature"],
                    "id": "unique_example_id",
                    "temperature": 20.0,
                    "units": "C",
                    "range": [0.0,100.0]
                  }
      post:
        body:
          application/json:
            schema: Temperature
            example: |
              {
                "id": "unique_example_id",
                "temperature":  18.0
              }
        responses:
          200:
             body:
              application/json:
                schema: Temperature
                example: |
                  {
                    "id": "unique_example_id",
                    "temperature": 18.0
                  }
  - sensorType:
      get:
        responses:
          200:
            body:
              application/json:
                schema: Sensor
                example: |
                  {
                    "rt": ["oic.r.sensor"],
                    "id": "unique_example_id",
                    "value": true
                  }

  - modeType:
      get:
        responses:
          200:
            body:
              application/json:
                schema: Mode
                example: |
                  {
                    "rt": ["oic.r.mode"],
                    "id": "unique_example_id",
                    "modes": <<modes>>,
                    "supportedModes": <<supportedmodes>>
                  }
      post:
        body:
          application/json:
            schema: ModeUpdate
            example: |
              {
                "id":    "unique_example_id",
                "modes": <<desiredmode>>
              }
        responses:
          200:
            body:
              application/json:
                schema: ModeUpdate
                example: |
                  {
                    "id":    "unique_example_id",
                    "modes": <<desiredmode>>
                  }


#
# Device relative URIs
#
/devices/{deviceid}:
  /ambientTemperature:
    displayName: Ambient Temperature
    is: [ interface-sensor ]
    type: {temperatureType}

  /targetTemperature:
    displayName: Target Temperature
    is: [ interface-actuator ]
    type: {temperatureType}

  /humidity:
    displayName: Humidity
    is: [ interface-sensor ]
    get:
       description: |
         Retrieves the current (relative) humidity level.
       responses:
         200:
           body:
             application/json:
               schema: Humidity
               example: |
                 {
                   "rt": ["oic.r.humidity"],
                   "id": "unique_example_id",
                   "humidity":40,
                 }

  /targetTemperatureHigh:
    displayName: Maximum target temperature
    is: [ interface-actuator ]
    type: {temperatureType}

  /targetTemperatureLow:
    displayName: Minimum target temperature
    is: [ interface-actuator ]
    type: {temperatureType}

  /awayMode:
    displayName: Away Mode
    is: [ interface-actuator ]
    type: { modeType: {modes : '["home"]', supportedmodes : ' ["home", "away"]', desiredmode : '["away"]' } }

  /awayTemperatureHigh:
    displayName: Maximum target temperature
    is: [ interface-actuator ]
    type: {temperatureType}

  /awayTemperatureLow:
    displayName: Minimum target temperature
    is: [ interface-actuator ]
    type: {temperatureType}

  /ecoMode:
    displayName: Is the thermostat running in an energy efficient mode
    is: [ interface-sensor ]
    type: {sensorType}

  /hvacMode:
    displayName: Hvac Mode
    is: [ interface-actuator ]
    type: { modeType: {modes : '["auto"]', supportedmodes : ' ["coolOnly", "heatOnly", "auto"]', desiredmode : '["heatOnly"]' } }

  /heatingFuelSource:
    displayName: Hvac fuel type
    is: [ interface-sensor ]
    get:
       responses:
         200:
           body:
             application/json:
               example: |
                 {
                   "id": "unique_example_id",
                   "rt": ["opent2t.r.heatingFuel"],
                   "fuelType": "gas"
                 }

  /hasFan:
    displayName: Does the system have a fan
    is: [ interface-sensor ]
    type: {sensorType}

  /fanActive:
    displayName: Does the system have a fan
    is: [ interface-sensor ]
    type: {sensorType}

  /fanTimerActive:
    displayName: Is the fan running
    is: [ interface-sensor ]
    type: {sensorType}

  /fanTimerTimeout:
    displayName: Timestamp indicating when fan will stop
    is: [ interface-actuator ]
    get:
       responses:
         200:
           body:
             application/json:
               schema: Clock
               example: |
                 {
                   "rt": ["oic.r.clock"],
                   "id": "unique_example_id",
                   "datetime":  "2015-11-05T14:30Z",
                 }
    post:
      body:
        application/json:
           schema: Clock
           example: |
             {
               "id": "unique_example_id",
               "datetime":  "2015-11-05T14:30Z",
             }
      responses:
         200:
           body:
             application/json:
               schema: Clock
               example: |
                 {
                   "id":"unique_example_id",
                   "datetime": "2015-11-05T14:30Z",
                 }

  /fanMode:
     displayName: Fan Mode
     is: [ interface-actuator ]
     type:  { modeType: {modes : '["auto"]', supportedmodes : '["auto", "on"]', desiredmode : '["on"]' } }
     
  /awayMode:
    displayName: Away Mode
    is: [ interface-sensor ]
    type: { modeType: {modes : '["offline"]', supportedmodes : ' ["online", "offline", "hidden", "deleted"]' } }


#
# Platform Level URIs
#
/:
  displayName: Platform
  get:
    responses:
      200:
        body:
          application/json:
            schema: ThermostatPlatform
            example: |
              {
                "opent2t": {
                  "schema": "org.opent2t.sample.thermostat.superpopular",
                  "translator": "opent2t-translator-com-opent2t-p-thermostat@0.1.1",
                  "controlId": 123
                },
                "availability": "online",
                "pi": "05E69E6E-CD88-40B0-8CF8-B887EB480AA4",
                "mnmn": "Contoso",
                "n": "Hallway thermostat",
                "rt": ["org.opent2t.sample.thermostat.superpopular"],
                "entities": [
                  {
                    "rt": ["opent2t.d.thermostat"],
                    "n": "Device 1",
                    "di": "71A7A620-45B6-4E95-9568-52FA0C3F55E6",
                    "icv": "core.1.1.0",
                    "dmv": "res.1.1.0",
                    "resources": [
                      {
                        "href": "/ambientTemperature",
                        "rt": [ "oic.r.temperature" ],
                        "if": [ "oic.if.s", "oic.if.baseline" ]
                      },
                      {
                        "href": "/targetTemperature",
                        "rt": [ "oic.r.temperature" ],
                        "if": [ "oic.if.a", "oic.if.baseline" ]
                      },
                      {
                        "href": "/humidity",
                        "rt": [ "oic.r.humidity" ],
                        "if": [ "oic.if.s", "oic.if.baseline" ]
                      },
                      {
                        "href": "/targetTemperatureHigh",
                        "rt": [ "oic.r.temperature" ],
                        "if": [ "oic.if.a", "oic.if.baseline" ]
                      },
                      {
                        "href": "/targetTemperatureLow",
                        "rt": [ "oic.r.temperature" ],
                        "if": [ "oic.if.a", "oic.if.baseline" ]
                      },
                      {
                        "href": "/awayMode",
                        "rt": ["oic.r.mode"],
                        "if": ["oic.if.a", "oic.if.baseline"]
                      },
                      {
                        "href": "/awayTemperatureHigh",
                        "rt": [ "oic.r.temperature" ],
                        "if": [ "oic.if.a", "oic.if.baseline" ]
                      },
                      {
                        "href": "/awayTemperatureLow",
                        "rt": [ "oic.r.temperature" ],
                        "if": [ "oic.if.a", "oic.if.baseline" ]
                      },
                      {
                        "href": "/ecoMode",
                        "rt": ["oic.r.sensor"],
                        "if": ["oic.if.s", "oic.if.baseline"]
                      },
                      {
                        "href": "/hvacMode",
                        "rt": ["oic.r.mode"],
                        "if": ["oic.if.a", "oic.if.baseline"]
                      },
                      {
                        "href": "/heatingFuelSource",
                        "rt": ["opent2t.r.heatingFuel"],
                        "if": ["oic.if.s", "oic.if.baseline"]
                      },
                      {
                        "href": "/hasFan",
                        "rt": ["oic.r.sensor"],
                        "if": ["oic.if.s", "oic.if.baseline"]
                      },
                      {
                        "href": "/fanActive",
                        "rt": ["oic.r.sensor"],
                        "if": ["oic.if.s", "oic.if.baseline"]
                      },
                      {
                        "href": "/fanTimerActive",
                        "rt": ["oic.r.sensor"],
                        "if": ["oic.if.s", "oic.if.baseline"]
                      },
                      {
                        "href": "/fanTimerTimeout",
                        "rt": ["oic.r.clock"],
                        "if": ["oic.if.a", "oic.if.baseline"]
                      },
                      {
                        "href": "/fanMode",
                        "rt": ["oic.r.mode"],
                        "if": ["oic.if.a", "oic.if.baseline"]
                      }
                     ]
                  }
                ]
              }

/?$expand:
  displayName: Platform
  get:
    responses:
      200:
        body:
          application/json:
            schema: ThermostatPlatform
            example: |
              {
                "opent2t": {
                  "schema": "org.opent2t.sample.thermostat.superpopular",
                  "translator": "opent2t-translator-com-opent2t-p-thermostat@0.1.1",
                  "controlId": 123
                },
                "availability": "online",
                "pi": "05E69E6E-CD88-40B0-8CF8-B887EB480AA4",
                "mnmn": "Contoso",
                "n": "Hallway thermostat",
                "rt": ["org.opent2t.sample.thermostat.superpopular"],
                "entities": [
                  {
                    "rt": ["opent2t.d.thermostat"],
                    "n": "Device 1",
                    "di": "71A7A620-45B6-4E95-9568-52FA0C3F55E6",
                    "icv": "core.1.1.0",
                    "dmv": "res.1.1.0",
                    "resources": [
                      {
                        "href": "/ambientTemperature",
                        "id": "ambientTemperature",
                        "rt": [ "oic.r.temperature" ],
                        "temperature": 20.0,
                        "units": "C",
                        "range": [0.0,100.0]
                      },
                      {
                        "href": "/targetTemperature",
                        "id": "targetTemperature",
                        "rt": [ "oic.r.temperature" ],
                        "temperature":20.0,
                        "units": "C",
                        "range": [0.0,100.0]
                      },
                      {
                       "href": "/humidity",
                       "id": "humidity",
                        "rt": [ "oic.r.humidity" ],
                        "humidity": 40
                      },
                      {
                        "href": "/targetTemperatureHigh",
                        "id": "targetTemperatureHigh",
                        "rt": [ "oic.r.temperature" ],
                        "temperature": 22.0,
                        "units": "C",
                        "range": [0.0,100.0]
                      },
                      {
                        "href": "/targetTemperatureLow",
                        "id": "targetTemperatureLow",
                        "rt": [ "oic.r.temperature" ],
                        "temperature": 18.0,
                        "units": "C",
                        "range": [0.0,100.0]
                      },
                     {
                        "href": "/awayMode",
                        "id": "awayMode",
                        "rt": ["oic.r.mode"],
                        "modes": ["home"],
                        "supportedModes": ["home","away"]
                      },
                      {
                        "href": "/awayTemperatureHigh",
                        "id": "awayTemperatureHigh",
                        "rt": [ "oic.r.temperature" ],
                        "temperature": 17.0,
                        "units": "C",
                        "range": [0.0,100.0]
                      },
                      {
                        "href": "/awayTemperatureLow",
                        "id": "awayTemperatureLow",
                        "rt": [ "oic.r.temperature" ],
                        "temperature": 15.0,
                        "units": "C",
                        "range": [0.0,100.0]
                      },
                      {
                        "href": "/ecoMode",
                        "id": "ecoMode",
                        "rt": ["oic.r.sensor"],
                        "value": true
                      },
                     {
                        "href": "/hvacMode",
                        "id": "hvacMode",
                        "rt": ["oic.r.mode"],
                        "modes": ["auto"],
                        "supportedModes": ["coolOnly", "heatOnly", "auto"]
                      },
                     {
                        "href": "/heatingFuelSource",
                        "id": "heatingFuelSource",
                        "rt": ["opent2t.r.heatingFuel"],
                        "fuelType": "gas"
                      },
                     {
                        "href": "/hasFan",
                        "id": "hasFan",
                        "rt": ["oic.r.sensor"],
                        "value": true
                      },
                     {
                        "href": "/fanActive",
                        "id": "fanActive",
                        "rt": ["oic.r.sensor"],
                        "value": true
                      },
                     {
                        "href": "/fanTimerActive",
                        "id": "fanTimerActive",
                        "rt": ["oic.r.sensor"],
                        "value": true
                      },
                      {
                        "href": "/fanTimerTimeout",
                        "id": "fanTimerTimeout",
                        "rt": ["oic.r.clock"],
                        "datetime": "2016-03-15T14:30Z"
                       },
                      {
                        "href": "/fanMode",
                        "id": "fanMode",
                        "rt": ["oic.r.mode"],
                        "modes": ["auto"],
                        "supportedModes": ["on","auto"]
                      }
                     ]
                  }
                ]
              }

/subscribe:
  description: |
   This resource manages subscriptions to changes on this device.
  displayName: Subscribe
    
  post:
    description: |
        Creates or refreshes a subscription to this Thermostat.  This method can be called twice, first with
        a callback URL (verificationRequest will be ignored), and the second time with the parameters of an http GET to the
        callback Url server for verification of the subscription (in which case callback Url will be ignored). The second call
        will construct a response that should be returned to the notifications server.
    body:
      application/json:
        schema: Subscription
        example: |
          {
            "callbackUrl": "http://myserver.com",
          }    
    responses:
       200:
        body:
          application/json:
            schema: Subscription
            example: |
                {
                  "callbackUrl":"http://myserver.com",
                  "expiration": "123456678",
                  "response": { "plain text response" }
                }
       400:
          body:
            application/json:
              example: { "message": "Bad request" }
       403:
          body:
            application/json:
              example: { "message": "Subscription is denied" }

  delete:
    description: Unsubscribes to notifications to a callback Url
    body:
      application/json:
        schema: Subscription
        example: |
          {
            "callbackUrl": "http://myserver.com",
          } 
    responses:
      200:
        body:
          application/json:
          example: {}

/?$availability: |
  description: This resource shows device availability
  displayName: Availability
  is: [ interface-sensor ]
  type: {availabilityType}